{
  "openapi": "3.0.3",
  "info": {
    "version": "0.0.1",
    "title": "Pet store",
    "description": "Pet store Node.js learning project",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://your-pet-server.onrender.com",
      "description": "Main server"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "Pets",
      "description": "Users' pets endpoints"
    },
    {
      "name": "Notices",
      "description": "Create or find notices about pets"
    },
    {
      "name": "News",
      "description": "Information about news"
    }
  ],
  "paths": {
    "/api/users/register": {
      "post": {
        "operationId": "register",
        "tags": [
          "Auth"
        ],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration form",
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "409": {
            "description": "Email in use",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": "409"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message to display",
                      "example": "Email in use"
                    },
                    "ErrorName": {
                      "type": "string",
                      "description": "Error name",
                      "example": "HttpError"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "operationId": "login",
        "tags": [
          "Auth"
        ],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "description": "Login form",
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User registered successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedErrorResponse"
          }
        }
      }
    },
    "/api/users/refresh": {
      "post": {
        "operationId": "refresh",
        "tags": [
          "Auth"
        ],
        "summary": "Refresh access token",
        "parameters": [],
        "requestBody": {
          "description": "Refresh data",
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RefreshRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Access token refresh successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshResponse"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/InvalidRefreshError"
          }
        }
      }
    },
    "/api/users/logout": {
      "post": {
        "operationId": "logout",
        "tags": [
          "Auth"
        ],
        "summary": "Logout user",
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "User logged out successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "integer",
                      "description": "HTTP status code",
                      "example": "200"
                    },
                    "message": {
                      "type": "string",
                      "description": "Message to display",
                      "example": "User logged out successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedErrorResponse"
          }
        }
      }
    },
    "/api/users/current": {
      "get": {
        "operationId": "currentUser",
        "tags": [
          "Auth"
        ],
        "summary": "Get info of current user",
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedErrorResponse"
          }
        }
      }
    },
    "/api/users/": {
      "patch": {
        "operationId": "updateUser",
        "tags": [
          "Auth"
        ],
        "summary": "Update user information",
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "description": "User's information form",
          "required": false,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedErrorResponse"
          }
        }
      }
    },
    "/api/pets/": {
      "post": {
        "operationId": "addPet",
        "tags": [
          "Pets"
        ],
        "summary": "Add user's pet",
        "parameters": [],
        "security": [
          {
            "Bearer": []
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/AddPetRequest"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/PetAddedResponse"
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedErrorResponse"
          },
          "409": {
            "$ref": "#/components/responses/PetDuplicateErrorResponse"
          }
        }
      }
    },
    "/api/pets/id": {
      "delete": {
        "operationId": "deletePet",
        "tags": [
          "Pets"
        ],
        "summary": "Delete user pet",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Pet's id",
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Pet successfully deleted",
            "content": {}
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      }
    },
    "/api/pets/own": {
      "get": {
        "operationId": "getOwnPets",
        "tags": [
          "Pets"
        ],
        "description": "Get list of all pets of the authenticated user",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PetArrayResponse"
                },
                "examples": {
                  "Success": {
                    "$ref": "#/components/examples/PetArrayResponseExample"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedErrorResponse"
          }
        }
      }
    },
    "/api/notices": {
      "post": {
        "operationId": "addNotice",
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "Notices"
        ],
        "summary": "Add new notice",
        "requestBody": {
          "description": "New notice form",
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/NoticeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoticeResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthenticatedErrorResponse"
          }
        }
      }
    },
    "/api/notices/{id}": {
      "delete": {
        "operationId": "deleteNotice",
        "tags": [
          "Notices"
        ],
        "summary": "Delete user notice",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Notice's id",
            "allowEmptyValue": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "Bearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Notice successfully deleted",
            "content": {}
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      }
    },
    "/api/news/": {
      "get": {
        "operationId": "getAllNews",
        "description": "Get list of all news",
        "tags": [
          "News"
        ],
        "summary": "Find all news",
        "parameters": [
          {
            "name": "skip",
            "in": "path",
            "description": "number of items to skip",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "limit",
            "in": "path",
            "description": "max records to return",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "q",
            "in": "path",
            "description": "filter for seeking",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "News successfully send",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewsResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFoundErrorResponse"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "HTTP status code",
            "example": "401"
          },
          "message": {
            "type": "string",
            "description": "Message to display",
            "example": "Email or password is invalid"
          },
          "ErrorName": {
            "type": "string",
            "description": "Error name",
            "example": "HttpError"
          }
        }
      },
      "RegistrationRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Denis"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "Qwerty123"
          }
        },
        "required": [
          "name",
          "email",
          "password"
        ]
      },
      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "HTTP status code",
            "example": "200"
          },
          "message": {
            "type": "string",
            "description": "Message to display",
            "example": "User registered successfully."
          },
          "data": {
            "type": "object",
            "properties": {
              "user": {
                "type": "object",
                "$ref": "#/components/schemas/User"
              },
              "accessToken": {
                "type": "string",
                "description": "User's token"
              }
            }
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password",
            "example": "Qwerty123"
          }
        }
      },
      "RefreshRequest": {
        "type": "string",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "Refresh token with body",
            "example": "JWT-token"
          }
        }
      },
      "RefreshResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "HTTP status code",
            "example": "200"
          },
          "message": {
            "type": "string",
            "description": "Message to display",
            "example": "Access token refresh successfully"
          },
          "data": {
            "type": "object",
            "properties": {
              "accessToken": {
                "type": "string",
                "description": "User's token"
              },
              "refreshToken": {
                "type": "string",
                "description": "User's token"
              }
            }
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "HTTP status code",
            "example": "200"
          },
          "message": {
            "type": "string",
            "description": "Message to display",
            "example": "User logged in successfully"
          },
          "data": {
            "type": "object",
            "properties": {
              "user": {
                "type": "object",
                "$ref": "#/components/schemas/User"
              },
              "accessToken": {
                "type": "string",
                "description": "User's token"
              },
              "refreshToken": {
                "type": "string",
                "description": "Refresh token"
              }
            }
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Anna"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "birthday": {
            "type": "string",
            "description": "User's birthday",
            "example": "01.01.2000"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number",
            "example": "+380968038877"
          },
          "city": {
            "type": "string",
            "description": "User's address",
            "example": "Kyiv"
          },
          "avatarURL": {
            "type": "string",
            "description": "User's avatar URL",
            "example": "https://res.cloudinary.com/dfltmvg4t/image/upload/v1700298149/avatars/placeholder.jpg"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "HTTP status code",
            "example": "200"
          },
          "message": {
            "type": "string",
            "description": "Message to display",
            "example": "User data"
          },
          "data": {
            "type": "object",
            "properties": {
              "user": {
                "type": "object",
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      },
      "UserUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Anna"
          },
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "birthday": {
            "type": "string",
            "description": "User's birthday",
            "example": "01.01.2000"
          },
          "phone": {
            "type": "string",
            "description": "User's phone number",
            "example": "+380968038877"
          },
          "city": {
            "type": "string",
            "description": "User's address",
            "example": "Kyiv"
          },
          "avatar": {
            "type": "string",
            "format": "binary",
            "description": "Attached image"
          }
        }
      },
      "PetRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Pet's name",
            "example": "Jess"
          },
          "type": {
            "type": "string",
            "description": "Pet's type",
            "example": "Scottish fold"
          },
          "birthDate": {
            "type": "string",
            "description": "Pet's birthday",
            "example": "01-01-2020"
          },
          "sex": {
            "type": "string",
            "description": "Pet's sex",
            "enum": [
              "male",
              "female",
              "other"
            ],
            "example": "female"
          },
          "comments": {
            "type": "string",
            "description": "Pet's description",
            "example": "Can talk with you"
          },
          "category": {
            "type": "string",
            "description": "Pet's category. The only and default value is 'own'",
            "example": "own"
          },
          "image": {
            "type": "string",
            "format": "binary",
            "description": "Attached image"
          }
        },
        "required": [
          "name",
          "type"
        ]
      },
      "PetResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Id from the DB",
            "example": "6560afc93633634eed5adddd"
          },
          "category": {
            "type": "string",
            "description": "Pet's category. The only value is 'own'",
            "example": "own"
          },
          "name": {
            "type": "string",
            "description": "Pet's name",
            "example": "Jess"
          },
          "type": {
            "type": "string",
            "description": "Pet's type",
            "example": "Scottish fold"
          },
          "birthDate": {
            "type": "string",
            "description": "Pet's birthday",
            "example": "01.01.2020"
          },
          "sex": {
            "type": "string",
            "description": "Pet's sex",
            "enum": [
              "male",
              "female",
              "other"
            ],
            "example": "female"
          },
          "comments": {
            "type": "string",
            "description": "Pet's description",
            "example": "Can talk with you"
          },
          "imageURL": {
            "type": "string",
            "description": "Link to the image",
            "example": "https://res.cloudinary.com/dfltmvg4t/image/upload/v1700298149/avatars/placeholder.jpg"
          }
        }
      },
      "PetArrayResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "HTTP status code",
            "example": "200"
          },
          "message": {
            "type": "string",
            "description": "Message to display",
            "example": "Ok"
          },
          "data": {
            "type": "object",
            "properties": {
              "qty": {
                "type": "integer",
                "format": "int32",
                "minimum": 0
              },
              "pets": {
                "type": "array",
                "minItems": 0,
                "items": {
                  "$ref": "#/components/schemas/PetResponse"
                }
              }
            }
          }
        }
      },
      "NewsResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "HTTP status code",
            "example": 200
          },
          "data": {
            "type": "object",
            "description": "news information",
            "example": {
              "imgUrl": "https://www.nytimes.com/images/2023/04/16/magazine/",
              "title": "What I Learned Dogsitting",
              "text": "In a city of yawning class...",
              "date": "2023-04-11T09:00:18+0000",
              "url": "https://www.nytimes.com/2023/04/11...",
              "id": "nyt://article/8d29f1fc-d146-509d-8ceb-5a5b17d7886b"
            }
          }
        }
      },
      "NoticeRequest": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Notice category",
            "enum": [
              "sell",
              "lost",
              "found",
              "good-hands"
            ],
            "example": "good-hands"
          },
          "title": {
            "type": "string",
            "description": "Title of the notice",
            "example": "The cute kitten is looking for an owner"
          },
          "location": {
            "type": "string",
            "description": "Location of the pet",
            "example": "Zhytomyr"
          },
          "name": {
            "type": "string",
            "description": "Pet's name",
            "example": "Jess"
          },
          "type": {
            "type": "string",
            "description": "Pet's type",
            "example": "Scottish fold"
          },
          "birthDate": {
            "type": "string",
            "description": "Pet's birthday",
            "example": "01-01-2020"
          },
          "sex": {
            "type": "string",
            "description": "Pet's sex",
            "enum": [
              "male",
              "female",
              "other"
            ],
            "example": "female"
          },
          "comments": {
            "type": "string",
            "description": "Pet's description",
            "example": "Can talk with you"
          },
          "image": {
            "type": "string",
            "format": "binary",
            "description": "Attached image"
          }
        },
        "required": [
          "category",
          "title",
          "location",
          "name",
          "type"
        ]
      },
      "NoticeResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "HTTP status code",
            "example": "200"
          },
          "message": {
            "type": "string",
            "description": "Message to display",
            "example": "Ok"
          },
          "data": {
            "type": "object",
            "properties": {
              "notice": {
                "type": "object",
                "$ref": "#/components/schemas/Notice"
              }
            }
          }
        }
      },
      "Notice": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Notice identifier in the DB",
            "example": "6562e9622da08f1e40735a68"
          },
          "category": {
            "type": "string",
            "description": "Notice category",
            "enum": [
              "sell",
              "lost",
              "found",
              "good-hands"
            ],
            "example": "good-hands"
          },
          "title": {
            "type": "string",
            "description": "Title of the notice",
            "example": "The cute kitten is looking for an owner"
          },
          "location": {
            "type": "string",
            "description": "Location of the pet",
            "example": "Zhytomyr"
          },
          "name": {
            "type": "string",
            "description": "Pet's name",
            "example": "Jess"
          },
          "type": {
            "type": "string",
            "description": "Pet's type",
            "example": "Scottish fold"
          },
          "birthDate": {
            "type": "string",
            "description": "Pet's birthday",
            "example": "01-01-2020"
          },
          "sex": {
            "type": "string",
            "description": "Pet's sex",
            "enum": [
              "male",
              "female",
              "other"
            ],
            "example": "female"
          },
          "comments": {
            "type": "string",
            "description": "Pet's description",
            "example": "Can talk with you"
          },
          "imageURL": {
            "type": "string",
            "format": "binary",
            "description": "Link to the image"
          }
        }
      }
    },
    "requestBodies": {
      "AddPetRequest": {
        "description": "Pet object",
        "required": true,
        "content": {
          "multipart/form-data": {
            "schema": {
              "$ref": "#/components/schemas/PetRequest"
            }
          }
        }
      }
    },
    "responses": {
      "UnauthenticatedErrorResponse": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {
              "Unauthorized": {
                "$ref": "#/components/examples/UnauthenticatedErrorExample"
              }
            }
          }
        }
      },
      "PetAddedResponse": {
        "description": "API response if pet was added successfully",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PetResponse"
            },
            "examples": {
              "PetAdded": {
                "$ref": "#/components/examples/PetResponseExample"
              }
            }
          }
        }
      },
      "PetDuplicateErrorResponse": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {
              "PetDuplicated": {
                "$ref": "#/components/examples/PetDuplicateErrorExample"
              }
            }
          }
        }
      },
      "InvalidRefreshError": {
        "description": "Refresh token invalid or null ib DB",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {
              "RefreshError": {
                "$ref": "#/components/examples/RefreshErrorExample"
              }
            }
          }
        }
      },
      "AttachedFileNotFoundErrorResponse": {
        "description": "API response in case of no attachment found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {
              "Unauthorized": {
                "$ref": "#/components/examples/AttachedFileNotFoundErrorExample"
              }
            }
          }
        }
      },
      "NotFoundErrorResponse": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            },
            "examples": {
              "NotFound": {
                "$ref": "#/components/examples/NotFoundErrorExample"
              }
            }
          }
        }
      }
    },
    "examples": {
      "UnauthenticatedErrorExample": {
        "value": {
          "code": "401",
          "message": "Email or password is invalid",
          "ErrorName": "HttpError"
        }
      },
      "PetResponseExample": {
        "value": {
          "code": "200",
          "message": "Pet added successfully",
          "data": {
            "pet": {
              "_id": "6560afc93633634eed5adddd",
              "name": "Jess",
              "type": "cat",
              "birthDate": "01-01-2020",
              "sex": "female",
              "comments": "My lovely kitty",
              "category": "own",
              "imageURL": "https://res.cloudinary.com/dfltmvg4t/image/upload/v1700298149/avatars/placeholder.jpg"
            }
          }
        }
      },
      "PetArrayResponseExample": {
        "value": {
          "code": "200",
          "message": "Ok",
          "data": {
            "qty": "2",
            "pets": [
              {
                "_id": "6560afc93633634eed5adddd",
                "name": "Jess",
                "type": "cat",
                "birthDate": "01-01-2020",
                "sex": "female",
                "comments": "My lovely kitty",
                "category": "own",
                "imageURL": "https://res.cloudinary.com/dfltmvg4t/image/upload/v1700298149/avatars/placeholder.jpg"
              },
              {
                "_id": "6560afc93633634eed5adddd",
                "name": "Jess",
                "type": "cat",
                "birthDate": "01-01-2020",
                "sex": "female",
                "comments": "My lovely kitty",
                "category": "own",
                "imageURL": "https://res.cloudinary.com/dfltmvg4t/image/upload/v1700298149/avatars/placeholder.jpg"
              }
            ]
          }
        }
      },
      "PetDuplicateErrorExample": {
        "value": {
          "code": "409",
          "message": "You already have a pet with that name",
          "ErrorName": "HttpError"
        }
      },
      "AttachedFileNotFoundErrorExample": {
        "value": {
          "code": "40",
          "message": "Attached file not found",
          "ErrorName": "HttpError"
        }
      },
      "NotFoundErrorExample": {
        "value": {
          "code": "404",
          "message": "Not found",
          "ErrorName": "HttpError"
        }
      },
      "RefreshErrorExample": {
        "value": {
          "code": "403",
          "message": "Refresh token invalid",
          "ErrorName": "HttpError"
        }
      }
    }
  }
}
